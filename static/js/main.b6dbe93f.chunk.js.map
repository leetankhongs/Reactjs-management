{"version":3,"sources":["components/TaskForm.js","actions/index.js","constants/actionType.js","components/Search.js","components/Sort.js","components/Controll.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","reducers/tasks.js","reducers/form.js","reducers/editTask.js","reducers/filter.js","reducers/search.js","reducers/sort.js","reducers/index.js","index.js"],"names":["TaskForm","props","onChangeValue","event","target","name","value","setState","onSubmit","preventDefault","taskEditing","onUpdateTask","state","onAddTask","resetForm","onCloseForm","status","id","this","nextProps","isDisplayForm","className","onClick","type","onChange","Component","connect","dispatch","task","actions","Search","searchList","onSearchList","txtSearch","placeholder","keyWord","Sort","Type","onSortList","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","sortBy","TaskItem","changeStatus","onUpdateStatus","deleteTask","onDeleteTask","updateItem","onEditTask","onOpenForm","index","TaskList","filter","console","log","onFilterTable","tasks","sort","toLowerCase","indexOf","a","b","elements","map","key","Name","Status","App","addTask","onNullTaskEditing","onToggleForm","filterList","filterName","filterStatus","Filter","Keyword","Controll","Boolean","window","location","hostname","match","data","JSON","parse","localStorage","getItem","initialState","UniqueID","Math","random","toString","substr","myReducer","action","newTask","push","setItem","stringify","_","findIndex","o","splice","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b6dbe93f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux';\r\n\r\nclass TaskForm extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: '',\r\n            name: '',\r\n            status: true\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        var {taskEditing} = this.props;\r\n        if (taskEditing) {\r\n            this.setState({\r\n                id: taskEditing.id,\r\n                name: taskEditing.name,\r\n                status: taskEditing.status\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        var {taskEditing} = nextProps;\r\n\r\n        if (taskEditing) {\r\n            this.setState({\r\n                id: taskEditing.id,\r\n                name: taskEditing.name,\r\n                status: taskEditing.status\r\n            });\r\n        } else {\r\n            this.setState({\r\n                id: '',\r\n                name: '',\r\n                status: true\r\n            });\r\n        }\r\n    }\r\n    onChangeValue = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        if (name === \"status\") {\r\n            value = target.value === \"true\" ? true : false;\r\n        }\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        var {taskEditing} = this.props;\r\n\r\n        if (taskEditing) {\r\n            this.props.onUpdateTask(this.state);\r\n        } else {\r\n            this.props.onAddTask(this.state);\r\n        }\r\n\r\n        this.resetForm();\r\n    }\r\n\r\n    onCloseForm = () => {\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({\r\n            name: '',\r\n            status: false\r\n        })\r\n        this.props.onCloseForm();\r\n    }\r\n\r\n    render() {\r\n        if(this.props.isDisplayForm === false) return '';\r\n        else\r\n        return (\r\n            <div className=\"panel panel-warning\">\r\n                <div className=\"panel-heading\">\r\n                    <h3 className=\"panel-title\">{this.state.id === \"\" ? \"Thêm CRUSH\" : \"Chỉnh sửa CRUSH\"}  &nbsp;\r\n                        <span className=\"fa fa-times-circle text-right\" onClick={this.onCloseForm}></span>\r\n                    </h3>\r\n\r\n                </div>\r\n                <div className=\"panel-body\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <div className=\"form-group\">\r\n                            <label>Tên :</label>\r\n                            <input type=\"text\"\r\n                                className=\"form-control\"\r\n                                name=\"name\"\r\n                                onChange={this.onChangeValue}\r\n                                value={this.state.name}\r\n                            />\r\n                        </div>\r\n                        <label>Trạng Thái :</label>\r\n                        <select className=\"form-control\"\r\n                            name=\"status\"\r\n                            value={this.state.status}\r\n                            onChange={this.onChangeValue}>\r\n                            <option value={true}>Kích Hoạt</option>\r\n                            <option value={false}>Ẩn</option>\r\n                        </select>\r\n                        <br />\r\n                        <div className=\"text-right\">\r\n                            <button type=\"submit\" className=\"btn btn-warning\">{this.state.id === \"\" ? \"Thêm\" : \"Chỉnh sửa\"}</button>&nbsp;\r\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.resetForm}>Hủy Bỏ</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n        isDisplayForm: state.isDisplayForm,\r\n        taskEditing: state.taskEditing\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onAddTask: (task)=>{\r\n            dispatch(actions.addTask(task));\r\n        },\r\n        onCloseForm: ()=>{\r\n            dispatch(actions.closeForm());\r\n        },\r\n        onUpdateTask: (task) =>{\r\n            dispatch(actions.updateTask(task));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskForm);\r\n","import * as types from './../constants/actionType'\r\n\r\nexport const listAll = ()=>{\r\n    return {\r\n        type: types.LIST_ALL\r\n    }\r\n}\r\n\r\nexport const addTask = (task)=>{\r\n    return {\r\n        type: types.ADD_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const toggleForm = ()=>{\r\n    return {\r\n        type: types.TOGGLE_FORM\r\n    }\r\n}\r\n\r\nexport const closeForm = ()=>{\r\n    return {\r\n        type: types.CLOSE_FORM\r\n    }\r\n}\r\n\r\nexport const openForm = ()=>{\r\n    return {\r\n        type: types.OPEN_FORM\r\n    }\r\n}\r\n\r\nexport const updateStatus = (id)=>{\r\n    return {\r\n        type: types.UPDATE_STATUS,\r\n        id\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id)=>{\r\n    return {\r\n        type: types.DELETE_TASK,\r\n        id\r\n    }\r\n}\r\n\r\nexport const editTask = (task)=>{\r\n    return {\r\n        type: types.EDIT_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const updateTask = (task)=>{\r\n    return {\r\n        type: types.UPDATE_TASK,\r\n        task\r\n    }\r\n}\r\n\r\nexport const nullTaskEditing = ()=>{\r\n    return {\r\n        type: types.NULL_TASK_EDITING\r\n    }\r\n}\r\n\r\nexport const filterTable = (filter)=>{\r\n    return {\r\n        type: types.FILTER_TABLE,\r\n        filter\r\n    }\r\n}\r\n\r\nexport const searchList = (keyWord)=>{\r\n    return {\r\n        type: types.SEARCH_LIST,\r\n        keyWord\r\n    }\r\n}\r\n\r\nexport const sortList = (value)=>{\r\n    return {\r\n        type: types.SORT_LIST,\r\n        value\r\n    }\r\n}\r\n\r\n","export const LIST_ALL = 'LIST_ALL';\r\nexport const ADD_TASK = 'ADD_TASK';\r\nexport const TOGGLE_FORM = 'TOGGLE_FORM';\r\nexport const CLOSE_FORM = 'CLOSE_FORM';\r\nexport const OPEN_FORM = 'OPEN_FORM';\r\nexport const UPDATE_STATUS = 'UPDATE_STATUS';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const EDIT_TASK = 'EDIT_TASK';\r\nexport const UPDATE_TASK = 'UPDATE_TASK'\r\nexport const NULL_TASK_EDITING = 'NULL_TASK_EDITING';\r\nexport const FILTER_TABLE = 'FILTER_TABLE';\r\nexport const SEARCH_LIST = 'SEARCH_LIST'\r\nexport const SORT_LIST = 'SORT_LIST'","import React, { Component } from 'react';\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux';\r\n\r\nclass Search extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            txtSearch: ''\r\n        }\r\n    }\r\n\r\n    onChangeValue = (event)=>{\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    searchList = ()=>{\r\n        this.props.onSearchList(this.state.txtSearch);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-group\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Nhập từ khóa...\" value = {this.state.txtSearch} name = \"txtSearch\" onChange = {this.onChangeValue}/>\r\n                <span className=\"input-group-btn\">\r\n                    <button className=\"btn btn-primary\" type=\"button\" onClick = {this.searchList}>\r\n                        <span className=\"fa fa-search mr-5\"></span>&nbsp;Tìm\r\n                                </button>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n    }   \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onSearchList: (keyWord) =>{\r\n            dispatch(actions.searchList(keyWord));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n","import React, { Component } from 'react';\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux';\r\nimport '../App.css'\r\n\r\nclass Sort extends Component {\r\n    \r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            Type: 0\r\n        }\r\n    }\r\n\r\n    onClick = (type) =>{\r\n        this.setState({\r\n            Type: type\r\n        })\r\n\r\n        this.props.onSortList(type);\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dropdown\">\r\n                <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                    Sắp Xếp &nbsp; <span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                    <li>\r\n                        <a role=\"button\" className={this.state.Type === 0?\"sort_selected\" : \"\"} onClick = {()=>this.onClick(0)}>\r\n                            <span >\r\n                                Null\r\n                                                    </span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a role=\"button\" className={this.state.Type === 1?\"sort_selected\" : \"\" } onClick = {()=>this.onClick(1)}>\r\n                            <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                Tên A-Z\r\n                                                    </span>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a role=\"button\" className={this.state.Type === -1?\"sort_selected\" : \"\"} onClick = {()=>this.onClick(-1)}>\r\n                            <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                Tên Z-A\r\n                                                    </span>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n    }   \r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onSortList: (value) =>{\r\n            dispatch(actions.sortList(value));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Sort);","import React, { Component } from 'react';\r\nimport Search from './Search';\r\nimport Sort from './Sort';\r\nclass Control extends Component {\r\n\r\n    searchList = (txtSearch)=>{\r\n        this.props.searchList(txtSearch);\r\n    }\r\n\r\n    sortBy = (type) =>{\r\n        this.props.sortBy(type)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <Search searchList = {this.searchList}/>\r\n                </div>\r\n                <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\r\n                    <Sort sortBy = {this.sortBy}/>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from 'react';\r\nimport * as actions from './../actions/index'\r\nimport {connect} from 'react-redux';\r\n\r\nclass TaskItem extends Component {\r\n\r\n    changeStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    }\r\n\r\n    deleteTask = () => {\r\n        this.props.onDeleteTask(this.props.task.id);\r\n    }\r\n\r\n    updateItem = () =>{\r\n        this.props.onEditTask(this.props.task);\r\n        this.props.onOpenForm();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <tr>\r\n                <td>{this.props.index + 1}</td>\r\n                <td>{this.props.task.name}</td>\r\n                <td className=\"text-center\">\r\n\r\n                    <span className={this.props.task.status === true ? \"label label-danger\" : \"label label-success\"} onClick={this.changeStatus}>\r\n                        {this.props.task.status === true ? \"Kích hoạt\" : \"Ẩn\"}\r\n                    </span>\r\n                </td>\r\n                <td className=\"text-center\">\r\n                    <button type=\"button\" className=\"btn btn-warning\" onClick = {this.updateItem}>\r\n                        <span className=\"fa fa-pencil mr-5\"></span>&nbsp;Sửa\r\n                                            </button>\r\n                                            &nbsp;\r\n                                            <button type=\"button\" className=\"btn btn-danger\" onClick={this.deleteTask}>\r\n                        <span className=\"fa fa-trash mr-5\"></span>&nbsp;Xóa\r\n                                            </button>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return{\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) =>{\r\n    return {\r\n        onUpdateStatus: (id)=>{\r\n            dispatch(actions.updateStatus(id));\r\n        },\r\n        onDeleteTask: (id)=>{\r\n            dispatch(actions.deleteTask(id));\r\n        },\r\n        onOpenForm: ()=>{\r\n            dispatch(actions.openForm());\r\n        },\r\n        onEditTask: (task)=>{\r\n            dispatch(actions.editTask(task));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(TaskItem);\r\n","import React, { Component } from 'react';\r\nimport TaskItem from './TaskItem'\r\nimport '../App.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './../actions/index'\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            status: -1\r\n        }\r\n    }\r\n\r\n\r\n    onChangeValue = (event) => {\r\n        var target = event.target;\r\n        var name = target.name;\r\n        var value = target.value;\r\n\r\n        var filter = {\r\n            name: name === \"name\" ? value : this.state.name,\r\n            status: name === \"status\" ? value : this.state.status\r\n        }\r\n\r\n        console.log(filter)\r\n        this.props.onFilterTable(filter);\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n\r\n\r\n    }\r\n    render() {\r\n        var { tasks, filter, keyWord, sort } = this.props;\r\n        if (filter) {\r\n            tasks = tasks.filter((task) => {\r\n                return task.name.toLowerCase().indexOf(filter.name.toLowerCase()) !== -1;\r\n            })\r\n            tasks = tasks.filter((task) => {\r\n                if (filter.status == -1) {\r\n                    return task;\r\n                }\r\n                else {\r\n                    return task.status === (filter.status == 1 ? true : false);\r\n                }\r\n            })\r\n        }\r\n\r\n        if (keyWord !== \"\") {\r\n            tasks = tasks.filter((task) => {\r\n                return task.name.toLowerCase().indexOf(keyWord.toLowerCase()) !== -1;\r\n            })\r\n        }\r\n\r\n        if(sort !== 0){\r\n            tasks.sort((a,b)=>{\r\n                if(a.name.toLowerCase() > b.name.toLowerCase()) return sort;\r\n                else if(a.name.toLowerCase() < b.name.toLowerCase()) return -sort;\r\n                else return 0;\r\n            })\r\n        }\r\n\r\n        var elements = tasks.map((task, index) => {\r\n            return <TaskItem key={index} task={task} index={index}\r\n                deleteTask={this.deleteTask}\r\n                updateItem={this.updateItem} />\r\n        })\r\n        return (\r\n            <table className=\"table table-bordered table-hover mt-15\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"text-center\">STT</th>\r\n                        <th className=\"text-center\">Tên</th>\r\n                        <th className=\"text-center\">Trạng Thái</th>\r\n                        <th className=\"text-center\">Hành Động</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>\r\n                            <input type=\"text\" className=\"form-control\" name=\"name\" onChange={this.onChangeValue} value={this.state.Name} />\r\n                        </td>\r\n                        <td>\r\n                            <select className=\"form-control\" name=\"status\" onChange={this.onChangeValue} value={this.state.Status}>\r\n                                <option value={-1}>Tất Cả</option>\r\n                                <option value={0}>Ẩn</option>\r\n                                <option value={1}>Kích Hoạt</option>\r\n                            </select>\r\n                        </td>\r\n                        <td></td>\r\n                    </tr>\r\n\r\n                    {elements}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        tasks: state.tasks,\r\n        filter: state.filter,\r\n        keyWord: state.keyWord,\r\n        sort: state.sort\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, props) => {\r\n    return {\r\n        onFilterTable: (filter) => {\r\n            dispatch(actions.filterTable(filter));\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskList);\r\n","import React, { Component } from 'react';\nimport './App.css'\nimport TaskForm from './components/TaskForm'\nimport Controll from './components/Controll'\nimport TaskList from './components/TaskList'\nimport { connect } from 'react-redux'\nimport * as actions from './actions/index'\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            Sort: 0\n        };\n    }\n\n    addTask = () => {\n\n        if(this.props.taskEditing){\n            this.props.onNullTaskEditing();\n            this.props.onOpenForm();\n        }else{\n            this.props.onToggleForm();\n        }\n    }\n\n\n\n    filterList = (filterName, filterStatus) => {\n        this.setState({\n            Filter: {\n                Name: filterName.toLowerCase(),\n                Status: filterStatus\n            }\n        })\n\n    }\n\n    searchList = (txtSearch) => {\n        this.setState({\n            Keyword: txtSearch\n        })\n    }\n\n    sortBy = (type) => {\n        this.setState({\n            Sort: type\n        })\n    }\n\n    render() {\n        var { isDisplayForm } = this.props;\n\n        return (\n            <div className=\"container\">\n                <div className=\"text-center\">\n                    <h1>Quản Lý CRUSH</h1>\n                    <hr />\n                </div>\n                <div className=\"row\">\n                    <div className={isDisplayForm === true ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\n                        <TaskForm />\n                    </div>\n                    <div className={isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                        <button type=\"button\" className=\"btn btn-primary\" onClick={this.addTask}>\n                            <span className=\"fa fa-plus mr-5\"></span>&nbsp;Thêm CRUSH\n                        </button>&nbsp;\n                        <div className=\"row mt-15\">\n                            <Controll searchList={this.searchList} sortBy={this.sortBy} />\n                        </div>\n                        <div className=\"row mt-15\">\n                            <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\">\n                                <TaskList />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        isDisplayForm: state.isDisplayForm,\n        taskEditing: state.taskEditing\n    }\n}\n\nconst mapDispatchToProps = (dispatch, props) => {\n    return {\n        onToggleForm: () => {\n            dispatch(actions.toggleForm());\n        },\n        onCloseForm: () => {\n            dispatch(actions.closeForm());\n        },\n        onOpenForm: () =>{\n            dispatch(actions.openForm())\n        },\n        onNullTaskEditing: () =>{\n            dispatch(actions.nullTaskEditing())\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from './../constants/actionType'\r\nimport _ from 'lodash';\r\nvar data = JSON.parse(localStorage.getItem(\"tasks\"));\r\nvar initialState = data? data : [];\r\n\r\nconst UniqueID = () => {\r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n}\r\n\r\nvar myReducer = (tasks = initialState, action)=>{\r\n    \r\n    switch(action.type){\r\n        case types.LIST_ALL:\r\n            return tasks;\r\n        case types.ADD_TASK:{\r\n            var newTask = {\r\n                id: UniqueID(),\r\n                name: action.task.name,\r\n                status: action.task.status\r\n            }\r\n            tasks.push(newTask); \r\n            localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n            return [...tasks];\r\n        }\r\n        case types.UPDATE_STATUS: {\r\n            var index = _.findIndex(tasks, (o)=> { \r\n                console.log(o.id)\r\n                return o.id === action.id; });\r\n            \r\n            if(index !== -1){\r\n                tasks[index] = {\r\n                    ...tasks[index],\r\n                    status: !tasks[index].status\r\n                }\r\n            }\r\n    \r\n            localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n            return [...tasks];\r\n        }\r\n        case types.DELETE_TASK: {\r\n            var index = _.findIndex(tasks, (o)=> { \r\n                console.log(o.id)\r\n                return o.id === action.id; });\r\n            \r\n            if(index !== -1){\r\n                tasks.splice(index, 1)\r\n            }\r\n    \r\n            localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n            return [...tasks];\r\n        }\r\n        case types.UPDATE_TASK: {\r\n            var index = _.findIndex(tasks, (o)=> { \r\n                console.log(o.id)\r\n                return o.id === action.task.id; });\r\n            \r\n            if(index !== -1){\r\n                tasks[index] = {\r\n                    ...tasks[index],\r\n                    name: action.task.name,\r\n                    status: action.task.status\r\n                }\r\n            }\r\n    \r\n            localStorage.setItem(\"tasks\",JSON.stringify(tasks));\r\n            return [...tasks];\r\n        }\r\n        default:\r\n            return tasks;\r\n    }\r\n}\r\n\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType'\r\n\r\nvar initialState = false;\r\n\r\nvar myReducer = (state = initialState, action)=>{\r\n    \r\n    switch(action.type){\r\n        case types.TOGGLE_FORM:\r\n            state = !state\r\n            return state;\r\n        case types.OPEN_FORM:\r\n            state = true;\r\n            return state;\r\n        case types.CLOSE_FORM:\r\n            state = false;\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType'\r\n\r\nvar initialState = null;\r\n\r\nvar myReducer = (task = initialState, action)=>{\r\n    \r\n    switch(action.type){\r\n        case types.EDIT_TASK:\r\n            task = action.task;\r\n            return task;\r\n        case types.NULL_TASK_EDITING:\r\n            task = null;\r\n            return task;\r\n        default:\r\n            return task;\r\n    }\r\n}\r\n\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType'\r\n\r\nvar initialState = {\r\n    name: '',\r\n    status: -1\r\n};\r\n\r\nvar myReducer = (filter = initialState, action)=>{\r\n    \r\n    switch(action.type){\r\n        case types.FILTER_TABLE:\r\n            return {\r\n                name: action.filter.name,\r\n                status: action.filter.status\r\n            }\r\n        default:\r\n            return filter\r\n    }\r\n}\r\n\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType'\r\n\r\nvar initialState = '';\r\n\r\nvar myReducer = (keyWord = initialState, action)=>{\r\n    \r\n    switch(action.type){\r\n        case types.SEARCH_LIST:\r\n            return action.keyWord\r\n        default:\r\n            return keyWord\r\n    }\r\n}\r\n\r\n\r\nexport default myReducer;","import * as types from '../constants/actionType'\r\n\r\nvar initialState = 0;\r\n\r\nvar myReducer = (value = initialState, action)=>{\r\n    \r\n    switch(action.type){\r\n        case types.SORT_LIST:\r\n            return action.value\r\n        default:\r\n            return value\r\n    }\r\n}\r\n\r\n\r\nexport default myReducer;","import {combineReducers} from 'redux';\r\nimport tasks from './tasks'\r\nimport isDisplayForm from './form'\r\nimport taskEditing from './editTask';\r\nimport filter from './filter';\r\nimport keyWord from './search';\r\nimport sort from './sort'\r\nconst myReducer = combineReducers({\r\n    tasks,\r\n    isDisplayForm,\r\n    taskEditing,\r\n    filter,\r\n    keyWord,\r\n    sort\r\n})\r\n\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Create Store\nimport { createStore } from 'redux';\nimport myReducer from './reducers/index'\nimport { Provider } from 'react-redux';\nconst store = createStore(myReducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}